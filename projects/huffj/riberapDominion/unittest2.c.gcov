        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/************************************************************
        -:    2:*
        -:    3:* unittest2.c
        -:    4:*
        -:    5:* -----------------
        -:    6:* Josh Huff 
        -:    7:* huffj@oregonstate.edu
        -:    8:* CS362 -- Spring 2018
        -:    9:* Assignment 3 
        -:   10:* -----------------
        -:   11:*
        -:   12:* Unit Test for whoseTurn() in dominion.c
        -:   13:*
        -:   14:*************************************************************/
        -:   15:#include <stdio.h>
        -:   16:#include <stdlib.h>
        -:   17:#include <string.h>
        -:   18:#include <assert.h>
        -:   19:#include <math.h>
        -:   20:#include "dominion.h"
        -:   21:#include "dominion_helpers.h"
        -:   22:#include "interface.h"
        -:   23:#include "rngs.h"
        -:   24:
function testWhoseTurn called 1 returned 100% blocks executed 100%
        1:   25:void testWhoseTurn() {
        -:   26:
        1:   27:  int k[10] = {adventurer, feast, baron, mine, great_hall, 
        -:   28:               remodel, smithy, village, ambassador, embargo};
        -:   29:            
        1:   30:  int players = 2;
        1:   31:  int seed = 1000;
        -:   32:  struct gameState state; 
        -:   33:
        1:   34:  memset(&state, 23, sizeof(struct gameState));
        1:   35:  initializeGame(players, k, seed, &state);
call    0 returned 100%
        -:   36:  
        1:   37:  printf("TESTING whoseTurn():\n");
call    0 returned 100%
        -:   38:	
        -:   39:// Test 1 -- whoseTurn indicates the appropriate player found in the game state.
        1:   40:  printf("Test: whoseTurn returns correct player.\n");
call    0 returned 100%
        -:   41:
        1:   42:  asserttrue(whoseTurn(&state), 0);
call    0 returned 100%
call    1 returned 100%
        -:   43:  
        -:   44:// Test 2 -- The turn has advanced. whoseTurn shows the player has been updated.
        1:   45:  printf("Test: The turn has advanced. whoseTurn returns correct player.\n");
call    0 returned 100%
        -:   46:
        1:   47:  endTurn(&state);
call    0 returned 100%
        1:   48:  asserttrue(whoseTurn(&state), 1);
call    0 returned 100%
call    1 returned 100%
        -:   49:
        -:   50:// Test 3 -- Multiple turns later. whoseTurn is not greater than the number of players in the game
        1:   51:  printf("Test: whoseTurn number is not greater than (n - 1), where n is the number of players in the game.\n");
call    0 returned 100%
        -:   52:  
        1:   53:  endTurn(&state);
call    0 returned 100%
        1:   54:  endTurn(&state);
call    0 returned 100%
        1:   55:  endTurn(&state);
call    0 returned 100%
        1:   56:  asserttrue(whoseTurn(&state) < players - 1, 1);
call    0 returned 100%
call    1 returned 100%
        -:   57:
        1:   58:}
        -:   59:
function main called 1 returned 100% blocks executed 100%
        1:   60:int main(int argc, char *argv[]){
        -:   61:
        1:   62:  testWhoseTurn();
call    0 returned 100%
        1:   63:  return 0;
        -:   64:}
